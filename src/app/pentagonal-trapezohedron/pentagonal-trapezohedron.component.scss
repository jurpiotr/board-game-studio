@use 'sass:math';
@import "../../stylings/vars.scss";

$color_dice: $secondary-color;
$color_dice_dark: $secondary-dark-color;
$widthSides: 6;
$heightSides: 6;
$unitWidthSides: 1em * $widthSides;
$unitHeightSide: 1em * $heightSides / 2;

$anglePentagon: (360 / 5) * 1deg;
$apothemPentagon: $heightSides / (2 * math.tan($anglePentagon / 2));
$heightDeflectionTriangles: math.sqrt(math.pow(($widthSides), 2) - math.pow($apothemPentagon, 2));
$sinDeflaction: math.div($heightDeflectionTriangles, $widthSides);
$angleDeflection: math.asin($sinDeflaction);

$isoscelesSide: math.sqrt(math.pow(($widthSides / 2), 2) + math.pow($apothemPentagon, 2));
$diffDeflectionVertexToBase: $isoscelesSide - $apothemPentagon;
$distance-top-from-bottom-triangles: math.tan($angleDeflection) * $diffDeflectionVertexToBase;
$heightConnectingCubes: ($diffDeflectionVertexToBase / math.cos($angleDeflection)) * 1.0em;

@keyframes rotation {
   0% {
      transform: rotateX(90deg) rotateY(0deg) rotateZ(0deg);
   }
   25%{
      transform: rotateX(60deg) rotateY(0deg) rotateZ(90deg);
   }
   50% {
      transform: rotateX(90deg) rotateY(0deg) rotateZ(180deg);
   }
   75% {
      transform: rotateX(120deg) rotateY(0deg) rotateZ(270deg);
   }
   100% {
      transform: rotateX(90deg) rotateY(0deg) rotateZ(360deg);
   }
}

.top1{ 
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(0deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top2{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(72deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top3{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(144deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top4{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(216deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top5{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(288deg) rotateX($angleDeflection );
   border-bottom: $unitWidthSides solid $color_dice;
}
.top6{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(36deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top7{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(108deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top8{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(180deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top9{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(252deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top10{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(324deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.obj3d{
   width: 100%;
   height:100%;
   perspective: 800px;
}

.dice{
   position: relative;
   width: 100%;
   height: 100%;
   transform-style: preserve-3d;
   transform-origin: center;
   transform: rotateX(90deg) rotateZ(0deg);
    &:hover {
      animation: rotation 8s linear infinite;
      animation-direction: initial;
    }
}

.deltoid {
   position: absolute;
   top: 50%;
   left: calc(50% - $unitHeightSide);
   width: 0;
   transform-origin: 50% 0;
   backface-visibility: hidden;
   border-left: $unitHeightSide solid transparent;
   border-right: $unitHeightSide solid transparent;
}
.deltoid::after {
   content: '';
   position: absolute;
   top: $unitWidthSides;
   left: -$unitHeightSide;
   width: 0;
   border-left: $unitHeightSide solid transparent;
   border-right: $unitHeightSide solid transparent;
   border-top: $heightConnectingCubes solid $color_dice;

}