@use 'sass:math';
@import "../stylings/vars.scss";

$color_dice: $secondary-color;
$color_dice_dark: $secondary-dark-color;
$widthSides: 6;
$heightSides: 6;
$unitWidthSides: 1em * $widthSides;
$unitHeightSide: 1em * $heightSides / 2;

$anglePentagon: (360 / 5) * 1deg;
$apothemPentagon: $heightSides / (2 * math.tan($anglePentagon / 2));
$heightDeflectionTriangles: math.sqrt(math.pow(($widthSides), 2) - math.pow($apothemPentagon, 2));
$sinDeflaction: math.div($heightDeflectionTriangles, $widthSides);
$angleDeflection: math.asin($sinDeflaction);

$isoscelesSide: math.sqrt(math.pow(($widthSides / 2), 2) + math.pow($apothemPentagon, 2));
$diffDeflectionVertexToBase: $isoscelesSide - $apothemPentagon;
$distance-top-from-bottom-triangles: math.tan($angleDeflection) * $diffDeflectionVertexToBase;
$heightConnectingCubes: ($diffDeflectionVertexToBase / math.cos($angleDeflection)) * 1.0em;

@keyframes rotation {
   0% {
      transform: rotateX(90deg) rotateY(0deg) rotateZ(0deg);
   }
   25%{
      transform: rotateX(60deg) rotateY(0deg) rotateZ(90deg);
   }
   50% {
      transform: rotateX(90deg) rotateY(0deg) rotateZ(180deg);
   }
   75% {
      transform: rotateX(120deg) rotateY(0deg) rotateZ(270deg);
   }
   100% {
      transform: rotateX(90deg) rotateY(0deg) rotateZ(360deg);
   }
}

.top1{ 
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(0deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top2{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(72deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top3{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(144deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top4{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(216deg) rotateX($angleDeflection);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top5{
   transform: translate3d(0px, 0px, $heightDeflectionTriangles * -1em) rotateZ(288deg) rotateX($angleDeflection );
   border-bottom: $unitWidthSides solid $color_dice;
}
.top6{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(36deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top7{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(108deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top8{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(180deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top9{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(252deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.top10{
   transform: translate3d(0px, 0px, $distance-top-from-bottom-triangles + $heightDeflectionTriangles + em) rotateZ(324deg) rotateX($angleDeflection * -1) rotateY(180deg);
   border-bottom: $unitWidthSides solid $color_dice;
}
.obj3d{
   width: 100%;
   height:100%;
   perspective: 800px;
}

.dice{
   position: relative;
   width: 100%;
   height: 100%;
   transform-style: preserve-3d;
   transform-origin: center;
   transform: rotateX(90deg) rotateZ(0deg);
    &:hover {
      animation: rotation 8s linear infinite;
      animation-direction: initial;
    }
}

.deltoid {
   position: absolute;
   top: 50%;
   left: calc(50% - $unitHeightSide);
   width: 0;
   transform-origin: 50% 0;
   backface-visibility: hidden;
   border-left: $unitHeightSide solid transparent;
   border-right: $unitHeightSide solid transparent;
}
.deltoid::after {
   content: '';
   position: absolute;
   top: $unitWidthSides;
   left: -$unitHeightSide;
   width: 0;
   border-left: $unitHeightSide solid transparent;
   border-right: $unitHeightSide solid transparent;
   border-top: $heightConnectingCubes solid $color_dice;

}


$edge-pentagon: 6;
$pentagon-height: $edge-pentagon / 2 * (math.sqrt(5 + (2 * math.sqrt(5))));

$pentagon-diagonal: ($edge-pentagon * (1 + math.sqrt(5)))/2;
$outside-edge-angles: (180deg - 108deg) / 2;
$apothemPentagon: $edge-pentagon / (2 * math.tan($outside-edge-angles));
$pentagon-circumcircle-radius: $pentagon-height - $apothemPentagon;

$xyz: $pentagon-circumcircle-radius - $apothemPentagon;
$height-pentagon-deflation: math.tan($outside-edge-angles) * $apothemPentagon;
$hypotenuse-pentagon-deflation: math.sqrt(math.pow($apothemPentagon, 2) + math.pow($height-pentagon-deflation, 2));
$height-diagonal-to-center:  math.sqrt(math.pow($pentagon-circumcircle-radius, 2) - math.pow(($pentagon-diagonal / 2), 2));
$turn-thift-pentagon-to-diagonal: $apothemPentagon - $height-diagonal-to-center;


$angle-between-sides: math.acos(math.sqrt(5) / 5);


.pentagon {
   position: absolute;
   width: $pentagon-height * 1em;
   height: $pentagon-height * 1em;
   background: linear-gradient(0deg, $color_dice 0%, $color_dice_dark 100%);
   clip-path: polygon( 50% 0, 100% 38.1965954%, 81.9017026% 100%, 18.4982974% 100%, 0 38.1965954%);
}

.p1{
   opacity: 1;
   background-color: $color_dice;
}
.p2 {
   transform: translate3d(0px, 0px, 0px) rotateZ(180deg) rotateX(65deg);
   transform-origin: 50% 100%;
   opacity: 1;
   background: linear-gradient(0deg, $color_dice 0%, $color_dice_dark 100%);

}
.p3 {
   transform: translate3d( 0, 0%, 0px) rotateZ(253deg) rotateX(65.0deg) rotateY(0deg);
   transform-origin: 19.09% 99%;
   opacity: 1;
}
.p4 {
   transform: translate3d(0%, 0%, 0px) rotateZ(324.5deg) rotateX(65deg) rotateY(0deg);
   transform-origin: -86% 100%;
   opacity: 1;
}
.p5 {
   transform: translate3d(0px, 0px, 0px) rotateZ(36deg) rotateX(65deg) rotateY(0deg);
   transform-origin: 186% 100%;
   opacity: 1;
}
.p6 {
   transform: translate3d(0px, 0px, 0px) rotateZ(107.8deg) rotateX(65deg);
   transform-origin: 81.8017026% 99.5%;
   opacity: 1;
}


.container {
   display: flex;
   flex-direction: column;
   margin: auto;
   width: 90vw;
   height: 100vh;
   overflow: hidden;
   
   &::before {
      content: '';
      z-index: 0;
      display: block;
      position: relative;
      top: 0;
      width: 80vw;
      height: auto;
      margin: 0 auto;
      box-shadow: 0px 0px 40vmin 12vmin $secondary-light-color;
   }
}

.toolbar {
   z-index: 1;
   display: flex;
   justify-content: center;
   align-items: center;
   color: $secondary-light-color;

   &__logo {
      display: flex;
      align-items: center;
      height: 6rem;
   }

   &__logo-img {
      height: 80%;
   }

   &__list {
      display: flex;
      justify-content: center;
      flex-direction: row;
      flex: 1 1 100%;
      list-style: none;
      font-size: 2rem;
   }

   &__list-item {
      margin: 0 1rem;
      padding: 0.5rem;
      font-variant: small-caps;
      font-weight: bold;
      color: $secondary-light-color;
      text-shadow: 0 0 0.2rem darken($color: $secondary-color, $amount: 20);
   }
}

.main {
   flex: 1 1 100%;
   display: flex;
   flex-direction: row;
   align-items: flex-start;
   margin: 0.7rem 1.25rem;
   background-color: darken($color: $secondary-color, $amount: 30);
   border-radius: 0.6rem;
   box-shadow: 0 0 0.5rem 0.5rem darken($color: $secondary-color, $amount: 30);
   &__panel {
      margin: 0.6rem;
      padding: 0.2rem;
      border-radius: 0.6rem;
      background: linear-gradient(180deg, darken($color: $secondary-color, $amount: 20), darken($color: $secondary-color, $amount: 25));
      box-shadow:  0 0.05rem 0.1rem 0.2rem darken($color: $secondary-color, $amount: 30),
                   0 -0.05rem 0.1rem 0.2rem darken($color: $secondary-color, $amount: 10),
                   inset 0 0 0.2rem 0.1rem darken($color: $secondary-color, $amount: 30);
   }
   &__kind-of-dices {
      flex-basis: 20%;
   }
   &__results {
      flex-basis: 60%;
     }
   &__chosen-dices {
      flex-basis: 20%;
   }

   &__title {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 2.6rem;
      width: 100%;
      padding: 0.2rem 0.1rem;
      color: $primary-color;
      
      span {
         text-align: center;
         display: inline-block;
         height: fit-content;
         line-height: 1.2rem;
         vertical-align: middle;
      }
   }
   .selector-dices{
      list-style: none;
       }
   .kind-dice {
      display: flex;
      align-items: center;
      padding: 0.25rem;
      font-size: 1em;
   }
   .icon-dice {
      height: 3rem;
      width: 3rem;
      padding: 0.1rem;
      vertical-align: middle;
      border: 0.07rem solid $primary-dark-color;
      border-radius: 0.125rem;
      font-size: 0.25rem;
   }
   .name-dice {
      display: inline-block;
      padding: 0 0.25rem;
      color: $primary-color;
      height: fit-content;
      line-height: 1rem;
      vertical-align: middle;
   }
}

.footer {
   background-color: rgba(76, 216, 111, 0.4);
}



// $edge-pentagon: 120;
// $pentagon-height: ($edge-pentagon * (math.sqrt(5 + 2 * math.sqrt(5))))/2;
// $pentagon-diagonal: ($edge-pentagon * (1 + math.sqrt(5)))/2;
// $outside-edge-angles: (180deg - 108deg) / 2;
// $apothemPentagon: $edge-pentagon / (2 * math.tan($outside-edge-angles));
// $pentagon-circumcircle-radius: $pentagon-height - $apothemPentagon;

// $xyz: $pentagon-circumcircle-radius - $apothemPentagon;
// $height-pentagon-deflation: math.tan($outside-edge-angles) * $apothemPentagon;
// $hypotenuse-pentagon-deflation: math.sqrt(math.pow($apothemPentagon, 2) + math.pow($height-pentagon-deflation, 2));
// $height-diagonal-to-center:  math.sqrt(math.pow($pentagon-circumcircle-radius, 2) - math.pow(($pentagon-diagonal / 2), 2));
// $turn-thift-pentagon-to-diagonal: $apothemPentagon - $height-diagonal-to-center;

// $diff-circumcircles: $pentagon-circumcircle-radius - $apothemPentagon;
// $circumcircles-ratio: ($pentagon-circumcircle-radius/ $apothemPentagon) * 50%;
// p {
//    width: $diff-circumcircles * 10px;
//    height: 20px;
//    background: rgb(81, 226, 23);
// }
// .dogecahedron {
//    position: relative;
//    width: $pentagon-diagonal * 1px;
//    height: $pentagon-diagonal * 1px;

//    background: rgb(23, 255, 100);
//    .pentagon {
//       top: ($diff-circumcircles / 4) * 1px;
//    }
// }
// .pentagon {
//    position: absolute;
//    width: $pentagon-height * 1px;
//    height: $pentagon-height * 1px;
//    background: linear-gradient(45deg, rgba(194, 47, 47, 0.7) 0%, rgba(0, 0, 216, 0.4) 100%);
//    transform-origin: 50%;

// }
// .p2 {
//    display: flex;
//    justify-content: center;
//    align-items: center;
//    transform: /*translate3d($edge-pentagon * 1.36px, $turn-thift-pentagon-to-diagonal * 1px, 0px) */rotateZ($outside-edge-angles * 8);
//    animation: r 6s linear infinite;
//    clip-path: polygon( 50% 0, 100% 38%, 81% 100%, 19% 100%, 0 38%);
// }
// .ppp{
//    width: 2px;
//    height: 2px;
//    background-color: black;
// }



// @keyframes r {
//    0% {
//       transform: rotateX(0) rotateY(0deg) rotateZ(0deg);
//    }
//    25%{
//       transform: rotateX(0) rotateY(0deg) rotateZ(90deg);
//    }
//    50% {
//       transform: rotateX(0) rotateY(0deg) rotateZ(180deg);
//    }
//    75% {
//       transform: rotateX(0) rotateY(0deg) rotateZ(270deg);
//    }
//    100% {
//       transform: rotateX(0) rotateY(0deg) rotateZ(360deg);
//    }


// }